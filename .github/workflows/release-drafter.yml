
name: Create Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up GitHub CLI
      run: |
        sudo apt update
        sudo apt install gh
        gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
    
    - name: Fetch merged PRs targeting the main branch
      run: |
        pr_data=$(gh pr list --state merged --base main --json title)
        # Initialize version bump type
        BUMP_TYPE="patch"
    
        # Check PR titles for versioning keywords
        if echo "$pr_data" | grep -iq "major"; then
          BUMP_TYPE="major"
        elif echo "$pr_data" | grep -iq "minor"; then
          BUMP_TYPE="minor"
        fi
    
        echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_ENV
        echo "Determined BUMP_TYPE=$BUMP_TYPE"

    - name: Get latest tag and calculate next version
      id: calculate_version
      run: |
        # Fetch all tags
        git fetch --tags
        
        # Get the latest tag or use "v0.0.0" as fallback
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        VERSION=${LATEST_TAG}
        IFS='.' read -r major minor patch <<< "$VERSION"

        # Increment version based on bump type
        if [ "$BUMP_TYPE" = "major" ]; then
          major=$((major + 1))
          minor=0
          patch=0
        elif [ "$BUMP_TYPE" = "minor" ]; then
          minor=$((minor + 1))
          patch=0
        else
          patch=$((patch + 1))
        fi

        NEW_VERSION="v$major.$minor.$patch"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "Calculated NEW_VERSION=$NEW_VERSION"

    - name: Check if tag exists
      run: |
        TAG_EXISTS=$(git tag -l "v$NEW_VERSION")
        if [ -n "$TAG_EXISTS" ]; then
          echo "Tag v$NEW_VERSION already exists. Incrementing patch version..."
          NEW_VERSION="v$(echo $NEW_VERSION | awk -F. -v OFS=. '{$NF++;print}')"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        else
          echo "Tag v$NEW_VERSION does not exist. Proceeding with the release."
        fi

    - name: Generate Release Notes
      run: |
          pr_data=$(gh pr list --state merged --base main --json title,body,labels)
          
          categorized_data=$(echo "$pr_data" | jq -r '
            group_by(.labels | map(.name) | flatten | map(select(. == "feature" or . == "bug" or . == "breaking-change"))) |
            map({
              category: (
                if any(.labels[]?.name == "feature") then "Features"
                elif any(.labels[]?.name == "bug") then "Bug Fixes"
                elif any(.labels[]?.name == "breaking-change") then "Breaking Changes"
                else "Other" end
              ),
              notes: map("\(.title): \n\(.body)") | unique | join("\n")
            }) |
            .[] |
            "## " + .category + "\n" + .notes
          ')
      
          echo "$categorized_data" > release_notes.md
          echo "Release notes generated and saved to release_notes.md."
      
    - name: Create Release
      run: |
        gh release create $NEW_VERSION release_notes.md --title "Release $NEW_VERSION" --notes-file release_notes.md
      env:
        NEW_VERSION: $NEW_VERSION
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
