name: Create Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      LATEST_TAG: "v0.0.0"  # Default value for the latest tag (can be overwritten in steps)
      
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Set up GitHub CLI and jq
      - name: Set up GitHub CLI and jq
        run: |
          sudo apt update
          sudo apt install -y gh jq
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      # Get the latest release tag
      - name: Get latest release tag
        id: get_latest_release
        run: |
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1 || echo "v0.0.0")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV  # Set as an environment variable for future steps

      # Get merged PRs since the latest tag
      - name: Get merged PRs since last release
        id: pr_data
        run: |
          LATEST_TAG="${{ env.LATEST_TAG }}"  # Use the environment variable from the previous step
          PR_DATA=$(gh pr list --state merged --base main --search "merged:>$LATEST_TAG" --json title,labels,body)
          echo "$PR_DATA" > pr_data.json
          echo "PR_DATA=$PR_DATA" >> $GITHUB_ENV  # Set as an environment variable for future steps

      # Debug PR Data (Optional)
      - name: Debug PR Data
        run: echo "$PR_DATA" || echo "No PR data available"

      # Determine the bump type using title and labels
      - name: Determine bump type
        id: bump_type
        run: |
          PR_DATA=$(cat pr_data.json)
          BUMP_TYPE="patch"  # Default bump type

          if echo "$PR_DATA" | jq -e '.[] | select(.title | test("\\bmajor\\b"))' >/dev/null; then
              BUMP_TYPE="major"
          elif echo "$PR_DATA" | jq -e '.[] | select(.title | test("\\bminor\\b"))' >/dev/null; then
              BUMP_TYPE="minor"
          elif echo "$PR_DATA" | jq -e '.[] | select(.title | test("\\bpatch\\b"))' >/dev/null; then
              BUMP_TYPE="patch"
          else
              if echo "$PR_DATA" | jq -e '.[] | select(.labels[]?.name == "major" or .labels[]?.name == "breaking-change")' >/dev/null; then
                  BUMP_TYPE="major"
              elif echo "$PR_DATA" | jq -e '.[] | select(.labels[]?.name == "minor" or .labels[]?.name == "feature" or .labels[]?.name == "enhancement")' >/dev/null; then
                  BUMP_TYPE="minor"
              elif echo "$PR_DATA" | jq -e '.[] | select(.labels[]?.name == "patch" or .labels[]?.name == "fix" or .labels[]?.name == "bug")' >/dev/null; then
                  BUMP_TYPE="patch"
              fi
          fi
          
          echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_OUTPUT  # Output the bump type for future steps

      # Generate Release Notes from PR data
      - name: Generate Release Notes
        id: release_notes
        run: |
          PR_DATA=$(cat pr_data.json)
          RELEASE_NOTES=$(echo "$PR_DATA" | jq -r '
            group_by(.labels | map(.name) | flatten | map(select(. == "feature" or . == "bug" or . == "breaking-change"))) |
            map({
              "category": (
                if any(.labels[]?.name == "feature") then "Features"
                elif any(.labels[]?.name == "bug") then "Bug Fixes"
                elif any(.labels[]?.name == "breaking-change") then "Breaking Changes"
                else "Other" end
              ),
              "notes": (map("\(.title): \(.body)") | join("\n"))
            }) |
            .[] |
            "## " + .category + "\n" + .notes
          ')

          # Only create release_notes.md if notes were generated
          if [ -n "$RELEASE_NOTES" ]; then
            echo "$RELEASE_NOTES" > release_notes.md
            echo "Release notes generated."
          else
            echo "No release notes generated."
          fi

      # Check if release_notes.md exists and create GitHub release
      - name: Create GitHub Release
        run: |
          if [ -f release_notes.md ]; then
            cat release_notes.md
            NEW_VERSION="v6.0.3"  # Get the new version from the output
            gh release create "$NEW_VERSION" --notes "$(cat release_notes.md)" --title "Release $NEW_VERSION" --draft
          else
            echo "release_notes.md file not found, skipping release creation"
          fi
