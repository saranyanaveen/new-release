---
    name: Create Release
    on:
      push:
        branches:
          - main
      pull_request:
        branches:
          - main
    jobs:
      release:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout code
            uses: actions/checkout@v2
            with:
              fetch-depth: 0
          - name: Set up GitHub CLI
            run: |
              sudo apt update
              sudo apt install 
              gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          - name: Debug Tags
            run: git tag --list
          - name: Get merged PR data
            run: |
              pr_data=$(gh pr list --state merged --base main --json title,labels)
              echo "PR Data: $pr_data"
    
              BUMP_TYPE="patch"  # Default version bump type
    
              if echo "$pr_data" | grep -iq "major"; then
                BUMP_TYPE="major"
              elif echo "$pr_data" | grep -iq "minor"; then
                BUMP_TYPE="minor"
              fi
    
              echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_ENV
          - name: Get latest tag version
            id: get_version
            run: |
              LATEST_TAG=$(git tag --sort=-v:refname | head -n 1 || echo "v0.0.0")
              echo "Latest tag: $LATEST_TAG"
    
              VERSION=${LATEST_TAG#v}
              echo "VERSION=$VERSION" >> $GITHUB_ENV
    
              IFS='.' read -r major minor patch <<< "$VERSION" || echo "0.0.0"
              echo "NEXT_MAJOR=$major" >> $GITHUB_ENV
              echo "NEXT_MINOR=$minor" >> $GITHUB_ENV
              echo "NEXT_PATCH=$patch" >> $GITHUB_ENV
          - name: Increment version based on bump type
            run: |
              if [ "$BUMP_TYPE" = "major" ]; then
                NEXT_MAJOR=$((NEXT_MAJOR + 1))
                NEXT_MINOR=0
                NEXT_PATCH=0
              elif [ "$BUMP_TYPE" = "minor" ]; then
                NEXT_MINOR=$((NEXT_MINOR + 1))
                NEXT_PATCH=0
              else
                NEXT_PATCH=$((NEXT_PATCH + 1))
              fi
    
              echo "NEXT_MAJOR=$NEXT_MAJOR" >> $GITHUB_ENV
              echo "NEXT_MINOR=$NEXT_MINOR" >> $GITHUB_ENV
              echo "NEXT_PATCH=$NEXT_PATCH"
          - name: Generate Release Notes
            run: |
              # Retrieve merged PR data
    
              pr_data=$(gh pr list --state merged --base main --json title,body,labels)
    
    
              # Categorize PRs and create release notes
    
              categorized_data=$(echo "$pr_data" | jq -r '
                group_by(.labels | map(.name) | flatten | map(select(. == "feature" or . == "bug" or . == "breaking-change"))) |
                map({
                  "category": (
                    if any(.labels[]?.name == "feature") then "Features"
                    elif any(.labels[]?.name == "bug") then "Bug Fixes"
                    elif any(.labels[]?.name == "breaking-change") then "Breaking Changes"
                    else "Other" end
                  ),
                  "notes": (map("\(.title): \n\(.body)") | unique | join("\n"))
                }) |
                .[] |
                "## " + .category + "\n" + .notes
              ')
    
    
              # Save release notes to a markdown file
    
              echo "$categorized_data" > release_notes.md
    
              echo "Release notes generated and saved to release_notes.md."
          - name: Check if tag exists
            run: |
              TAG_EXISTS=$(git tag -l "v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH")
    
    
              if [ -n "$TAG_EXISTS" ]; then
                echo "Tag v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH already exists. Incrementing patch version..."
                NEXT_PATCH=$((NEXT_PATCH + 1))
                echo "New version: v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH"
              else
                echo "Tag v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH does not exist. Proceeding with the release."
              fi
          - name: Create Release
            if: github.event_name == 'push'
            run: |
              TAG_EXISTS=$(git tag -l "v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH")
    
    
              if [ -z "$TAG_EXISTS" ]; then
                gh release create "v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH" release_notes.md \
                  --title "Release v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH" \
                  --notes-file release_notes.md
              else
                echo "Release with tag v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH already exists. Skipping release creation."
              fi
            env:
              NEW_VERSION: v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH
              GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
