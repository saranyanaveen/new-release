name: Create Release
on:
  push:
    tags:
      - "*"  # Trigger for tag pushes
  pull_request:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Ensure full fetch including all tags

      - name: Set up GitHub CLI
        run: |
          sudo apt update
          sudo apt install gh
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

      - name: Debug Tags
        run: git tag --list  # Log all fetched tags

      - name: Get merged PR data
        run: |
          pr_data=$(gh pr list --state merged --base main --json title,labels)
          echo "PR Data: $pr_data"

          BUMP_TYPE="patch"  # Default version bump type

          if echo "$pr_data" | grep -iq "major"; then
            BUMP_TYPE="major"
          elif echo "$pr_data" | grep -iq "minor"; then
            BUMP_TYPE="minor"
          fi

      - name: Generate Release Notes
        run: |
          pr_data=$(gh pr list --state merged --base main --json title,body,labels)
          
          categorized_data=$(echo "$pr_data" | jq -r '
            group_by(.labels | map(.name) | flatten | map(select(. == "feature" or . == "bug" or . == "breaking-change"))) |
            map({
              category: (
                if any(.labels[]?.name == "feature") then "Features"
                elif any(.labels[]?.name == "bug") then "Bug Fixes"
                elif any(.labels[]?.name == "breaking-change") then "Breaking Changes"
                else "Other" end
              ),
              notes: map("\(.title): \n\(.body)") | unique | join("\n")
            }) |
            .[] |
            "## " + .category + "\n" + .notes
          ')
      
          echo "$categorized_data" > release_notes.md
          echo "Release notes generated and saved to release_notes.md."
      
      - name: Create Release
        run: |
         gh release create $NEW_VERSION release_notes.md --title "Release $NEW_VERSION" --notes-file release_notes.md
        env:
         NEW_VERSION: $NEW_VERSION
         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
