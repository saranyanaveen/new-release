name: Create Release

on:
  push:
    tags:
      - '*'  # Trigger on new tags being pushed
  pull_request:
    branches:
      - main  # Trigger when PR is merged into main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up GitHub CLI
      run: |
        sudo apt update
        sudo apt install gh
        gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

    - name: Get merged PR data
      run: |
        # Fetch the merged PRs with title and labels
        pr_data=$(gh pr list --state merged --base main --json title,labels,mergedAt)

        echo "PR Data: $pr_data"

        # Initialize version bump type to 'patch'
        BUMP_TYPE="patch"

        # Check PR titles for versioning keywords
        if echo "$pr_data" | grep -iq "major"; then
          BUMP_TYPE="major"
        elif echo "$pr_data" | grep -iq "minor"; then
          BUMP_TYPE="minor"
        fi

        echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_ENV
        echo "Determined BUMP_TYPE=$BUMP_TYPE"

    - name: Fetch all tags
      run: git fetch --tags

    - name: List all tags
      run: git tag

    - name: Get latest tag version
      id: get_version
      run: |
        # Get the latest tag (fallback to v0.0.0 if no tags exist)
        LATEST_TAG=$(git tag --sort=-v:refname | head -n 1 || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
    
        # Remove the 'v' prefix from the tag
        VERSION=${LATEST_TAG#v}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    
        # Split version into components
        IFS='.' read -r major minor patch <<< "$VERSION" || echo "0.0.0"
        echo "NEXT_MAJOR=$major" >> $GITHUB_ENV
        echo "NEXT_MINOR=$minor" >> $GITHUB_ENV
        echo "NEXT_PATCH=$patch" >> $GITHUB_ENV

    - name: Increment version based on bump type
      run: |
        # Calculate the next version based on the bump type
        if [ "$BUMP_TYPE" = "major" ]; then
          NEXT_MAJOR=$((NEXT_MAJOR + 1))
          NEXT_MINOR=0
          NEXT_PATCH=0
        elif [ "$BUMP_TYPE" = "minor" ]; then
          NEXT_MINOR=$((NEXT_MINOR + 1))
          NEXT_PATCH=0
        else
          NEXT_PATCH=$((NEXT_PATCH + 1))
        fi

        echo "NEXT_MAJOR=$NEXT_MAJOR" >> $GITHUB_ENV
        echo "NEXT_MINOR=$NEXT_MINOR" >> $GITHUB_ENV
        echo "NEXT_PATCH=$NEXT_PATCH"
        echo "New version: v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH"

    - name: Check if tag exists
      run: |
        TAG_EXISTS=$(git tag -l "v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH")
        if [ -n "$TAG_EXISTS" ]; then
          echo "Tag v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH already exists. Incrementing patch version..."
          NEXT_PATCH=$((NEXT_PATCH + 1))
          echo "New version: v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH"
        else
          echo "Tag v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH does not exist. Proceeding with the release."
        fi

    - name: Get merged PRs after last release
      run: |
        # Get the commit hash of the latest tag
        LAST_COMMIT=$(git rev-list -n 1 $LATEST_TAG)
        echo "LAST_COMMIT=$LAST_COMMIT" >> $GITHUB_ENV
        echo "Last commit for tag $LATEST_TAG: $LAST_COMMIT"

        # Fetch merged PRs since the last commit
        pr_data=$(gh pr list --state merged --base main --json title,body,labels,mergedAt --jq \
          ".[] | select(.mergedAt > \"$(git show -s --format=%ci $LAST_COMMIT)\") | {title, body, labels}")
        echo "PR Data: $pr_data"

        echo "$pr_data" > pr_data.json

    - name: Generate Release Notes
      run: |

        # Only generate release notes for PRs merged into main after a new tag is created
        pr_data=$(gh pr list --state merged --base main --json title,body,labels)

        # Filter and categorize the PRs based on labels
        categorized_data=$(echo "$pr_data" | jq -r '
          group_by(.labels | map(.name) | flatten | map(select(. == "feature" or . == "bug" or . == "breaking-change"))) |
          map({
            category: (
              if any(.labels[]?.name == "feature") then "Features"
              elif any(.labels[]?.name == "bug") then "Bug Fixes"
              elif any(.labels[]?.name == "breaking-change") then "Breaking Changes"
              else "Other" end
            ),
            notes: map("\(.title): \n\(.body)") | unique | join("\n")
          }) |
          .[] |
          "## " + .category + "\n" + .notes
        ')

        # Write the categorized release notes to a file
        echo "$categorized_data" > release_notes.md
        echo "Release notes generated and saved to release_notes.md."

    - name: Create Release
      if: github.event_name == 'push'  # Only create release on merge to main with a new tag
      run: |
        # Ensure the tag is not already created before creating the release
        TAG_EXISTS=$(git tag -l "v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH")
        if [ -z "$TAG_EXISTS" ]; then
          # If the tag doesn't exist, create the release
          gh release create "v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH" release_notes.md --title "Release v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH" --notes-file release_notes.md
        else
          echo "Release with tag v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH already exists. Skipping release creation."
        fi
      env:
        NEW_VERSION: v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
